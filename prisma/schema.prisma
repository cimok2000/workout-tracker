// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    workouts      Workout[]
    targetWeight  Int?      @default(0)
    weights       Weight[]
    meals         Meal[]
    steps         Steps[]
    sleeps        Sleep[]
    badges        Badge[]
    streak        Int?      @default(0)
    points        Int?      @default(0)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Workout {
    id          String     @id @default(cuid())
    name        String
    description String
    user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    exercises   Exercise[]
    date        DateTime
}

model Exercise {
    id          String  @id @default(cuid())
    name        String
    description String
    sets        Int
    reps        Int
    weight      Int
    workout     Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
    workoutId   String
}

// Weight
model Weight {
    id     String   @id @default(cuid())
    weight Int
    date   DateTime
    user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

model Meal {
    id          String   @id @default(cuid())
    name        String
    calories    Int
    description String
    date        DateTime
    User        User?    @relation(fields: [userId], references: [id])
    userId      String?
}

model Steps {
    id     String   @id @default(cuid())
    steps  Int
    date   DateTime
    user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

model Sleep {
    id     String   @id @default(cuid())
    hours  Int
    date   DateTime
    user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

model Badge {
    id     String @id @default(cuid())
    name   String
    user   User   @relation(fields: [userId], references: [id])
    userId String
}
